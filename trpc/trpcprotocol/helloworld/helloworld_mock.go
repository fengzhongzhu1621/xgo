// Code generated by MockGen. DO NOT EDIT.
// Source: helloworld.trpc.go
//
// Generated by this command:
//
//	mockgen -destination=helloworld_mock.go -package=helloworld --source=helloworld.trpc.go
//

// Package helloworld is a generated GoMock package.
package helloworld

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockGreeterService is a mock of GreeterService interface.
type MockGreeterService struct {
	ctrl     *gomock.Controller
	recorder *MockGreeterServiceMockRecorder
	isgomock struct{}
}

// MockGreeterServiceMockRecorder is the mock recorder for MockGreeterService.
type MockGreeterServiceMockRecorder struct {
	mock *MockGreeterService
}

// NewMockGreeterService creates a new mock instance.
func NewMockGreeterService(ctrl *gomock.Controller) *MockGreeterService {
	mock := &MockGreeterService{ctrl: ctrl}
	mock.recorder = &MockGreeterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGreeterService) EXPECT() *MockGreeterServiceMockRecorder {
	return m.recorder
}

// SayHello mocks base method.
func (m *MockGreeterService) SayHello(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SayHello", ctx, req)
	ret0, _ := ret[0].(*HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHello indicates an expected call of SayHello.
func (mr *MockGreeterServiceMockRecorder) SayHello(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockGreeterService)(nil).SayHello), ctx, req)
}

// MockGreeterHttpService is a mock of GreeterHttpService interface.
type MockGreeterHttpService struct {
	ctrl     *gomock.Controller
	recorder *MockGreeterHttpServiceMockRecorder
	isgomock struct{}
}

// MockGreeterHttpServiceMockRecorder is the mock recorder for MockGreeterHttpService.
type MockGreeterHttpServiceMockRecorder struct {
	mock *MockGreeterHttpService
}

// NewMockGreeterHttpService creates a new mock instance.
func NewMockGreeterHttpService(ctrl *gomock.Controller) *MockGreeterHttpService {
	mock := &MockGreeterHttpService{ctrl: ctrl}
	mock.recorder = &MockGreeterHttpServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGreeterHttpService) EXPECT() *MockGreeterHttpServiceMockRecorder {
	return m.recorder
}

// SayHello mocks base method.
func (m *MockGreeterHttpService) SayHello(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SayHello", ctx, req)
	ret0, _ := ret[0].(*HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHello indicates an expected call of SayHello.
func (mr *MockGreeterHttpServiceMockRecorder) SayHello(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockGreeterHttpService)(nil).SayHello), ctx, req)
}

// MockMessaging1RestfulService is a mock of Messaging1RestfulService interface.
type MockMessaging1RestfulService struct {
	ctrl     *gomock.Controller
	recorder *MockMessaging1RestfulServiceMockRecorder
	isgomock struct{}
}

// MockMessaging1RestfulServiceMockRecorder is the mock recorder for MockMessaging1RestfulService.
type MockMessaging1RestfulServiceMockRecorder struct {
	mock *MockMessaging1RestfulService
}

// NewMockMessaging1RestfulService creates a new mock instance.
func NewMockMessaging1RestfulService(ctrl *gomock.Controller) *MockMessaging1RestfulService {
	mock := &MockMessaging1RestfulService{ctrl: ctrl}
	mock.recorder = &MockMessaging1RestfulServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessaging1RestfulService) EXPECT() *MockMessaging1RestfulServiceMockRecorder {
	return m.recorder
}

// GetMessage mocks base method.
func (m *MockMessaging1RestfulService) GetMessage(ctx context.Context, req *GetMessageRequest1) (*Message1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage", ctx, req)
	ret0, _ := ret[0].(*Message1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockMessaging1RestfulServiceMockRecorder) GetMessage(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockMessaging1RestfulService)(nil).GetMessage), ctx, req)
}

// MockMessaging2RestfulService is a mock of Messaging2RestfulService interface.
type MockMessaging2RestfulService struct {
	ctrl     *gomock.Controller
	recorder *MockMessaging2RestfulServiceMockRecorder
	isgomock struct{}
}

// MockMessaging2RestfulServiceMockRecorder is the mock recorder for MockMessaging2RestfulService.
type MockMessaging2RestfulServiceMockRecorder struct {
	mock *MockMessaging2RestfulService
}

// NewMockMessaging2RestfulService creates a new mock instance.
func NewMockMessaging2RestfulService(ctrl *gomock.Controller) *MockMessaging2RestfulService {
	mock := &MockMessaging2RestfulService{ctrl: ctrl}
	mock.recorder = &MockMessaging2RestfulServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessaging2RestfulService) EXPECT() *MockMessaging2RestfulServiceMockRecorder {
	return m.recorder
}

// GetMessage mocks base method.
func (m *MockMessaging2RestfulService) GetMessage(ctx context.Context, req *GetMessageRequest2) (*Message2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage", ctx, req)
	ret0, _ := ret[0].(*Message2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockMessaging2RestfulServiceMockRecorder) GetMessage(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockMessaging2RestfulService)(nil).GetMessage), ctx, req)
}

// MockMessaging3RestfulService is a mock of Messaging3RestfulService interface.
type MockMessaging3RestfulService struct {
	ctrl     *gomock.Controller
	recorder *MockMessaging3RestfulServiceMockRecorder
	isgomock struct{}
}

// MockMessaging3RestfulServiceMockRecorder is the mock recorder for MockMessaging3RestfulService.
type MockMessaging3RestfulServiceMockRecorder struct {
	mock *MockMessaging3RestfulService
}

// NewMockMessaging3RestfulService creates a new mock instance.
func NewMockMessaging3RestfulService(ctrl *gomock.Controller) *MockMessaging3RestfulService {
	mock := &MockMessaging3RestfulService{ctrl: ctrl}
	mock.recorder = &MockMessaging3RestfulServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessaging3RestfulService) EXPECT() *MockMessaging3RestfulServiceMockRecorder {
	return m.recorder
}

// UpdateMessage mocks base method.
func (m *MockMessaging3RestfulService) UpdateMessage(ctx context.Context, req *UpdateMessageRequest3) (*Message3, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessage", ctx, req)
	ret0, _ := ret[0].(*Message3)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMessage indicates an expected call of UpdateMessage.
func (mr *MockMessaging3RestfulServiceMockRecorder) UpdateMessage(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessage", reflect.TypeOf((*MockMessaging3RestfulService)(nil).UpdateMessage), ctx, req)
}

// MockMessaging4RestfulService is a mock of Messaging4RestfulService interface.
type MockMessaging4RestfulService struct {
	ctrl     *gomock.Controller
	recorder *MockMessaging4RestfulServiceMockRecorder
	isgomock struct{}
}

// MockMessaging4RestfulServiceMockRecorder is the mock recorder for MockMessaging4RestfulService.
type MockMessaging4RestfulServiceMockRecorder struct {
	mock *MockMessaging4RestfulService
}

// NewMockMessaging4RestfulService creates a new mock instance.
func NewMockMessaging4RestfulService(ctrl *gomock.Controller) *MockMessaging4RestfulService {
	mock := &MockMessaging4RestfulService{ctrl: ctrl}
	mock.recorder = &MockMessaging4RestfulServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessaging4RestfulService) EXPECT() *MockMessaging4RestfulServiceMockRecorder {
	return m.recorder
}

// UpdateMessage mocks base method.
func (m *MockMessaging4RestfulService) UpdateMessage(ctx context.Context, req *Message4) (*Message4, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessage", ctx, req)
	ret0, _ := ret[0].(*Message4)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMessage indicates an expected call of UpdateMessage.
func (mr *MockMessaging4RestfulServiceMockRecorder) UpdateMessage(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessage", reflect.TypeOf((*MockMessaging4RestfulService)(nil).UpdateMessage), ctx, req)
}

// MockMessaging5RestfulService is a mock of Messaging5RestfulService interface.
type MockMessaging5RestfulService struct {
	ctrl     *gomock.Controller
	recorder *MockMessaging5RestfulServiceMockRecorder
	isgomock struct{}
}

// MockMessaging5RestfulServiceMockRecorder is the mock recorder for MockMessaging5RestfulService.
type MockMessaging5RestfulServiceMockRecorder struct {
	mock *MockMessaging5RestfulService
}

// NewMockMessaging5RestfulService creates a new mock instance.
func NewMockMessaging5RestfulService(ctrl *gomock.Controller) *MockMessaging5RestfulService {
	mock := &MockMessaging5RestfulService{ctrl: ctrl}
	mock.recorder = &MockMessaging5RestfulServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessaging5RestfulService) EXPECT() *MockMessaging5RestfulServiceMockRecorder {
	return m.recorder
}

// GetMessage mocks base method.
func (m *MockMessaging5RestfulService) GetMessage(ctx context.Context, req *GetMessageRequest5) (*Message5, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage", ctx, req)
	ret0, _ := ret[0].(*Message5)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockMessaging5RestfulServiceMockRecorder) GetMessage(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockMessaging5RestfulService)(nil).GetMessage), ctx, req)
}

// MockGreeterClientProxy is a mock of GreeterClientProxy interface.
type MockGreeterClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockGreeterClientProxyMockRecorder
	isgomock struct{}
}

// MockGreeterClientProxyMockRecorder is the mock recorder for MockGreeterClientProxy.
type MockGreeterClientProxyMockRecorder struct {
	mock *MockGreeterClientProxy
}

// NewMockGreeterClientProxy creates a new mock instance.
func NewMockGreeterClientProxy(ctrl *gomock.Controller) *MockGreeterClientProxy {
	mock := &MockGreeterClientProxy{ctrl: ctrl}
	mock.recorder = &MockGreeterClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGreeterClientProxy) EXPECT() *MockGreeterClientProxyMockRecorder {
	return m.recorder
}

// SayHello mocks base method.
func (m *MockGreeterClientProxy) SayHello(ctx context.Context, req *HelloRequest, opts ...client.Option) (*HelloReply, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SayHello", varargs...)
	ret0, _ := ret[0].(*HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHello indicates an expected call of SayHello.
func (mr *MockGreeterClientProxyMockRecorder) SayHello(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockGreeterClientProxy)(nil).SayHello), varargs...)
}

// MockGreeterHttpClientProxy is a mock of GreeterHttpClientProxy interface.
type MockGreeterHttpClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockGreeterHttpClientProxyMockRecorder
	isgomock struct{}
}

// MockGreeterHttpClientProxyMockRecorder is the mock recorder for MockGreeterHttpClientProxy.
type MockGreeterHttpClientProxyMockRecorder struct {
	mock *MockGreeterHttpClientProxy
}

// NewMockGreeterHttpClientProxy creates a new mock instance.
func NewMockGreeterHttpClientProxy(ctrl *gomock.Controller) *MockGreeterHttpClientProxy {
	mock := &MockGreeterHttpClientProxy{ctrl: ctrl}
	mock.recorder = &MockGreeterHttpClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGreeterHttpClientProxy) EXPECT() *MockGreeterHttpClientProxyMockRecorder {
	return m.recorder
}

// SayHello mocks base method.
func (m *MockGreeterHttpClientProxy) SayHello(ctx context.Context, req *HelloRequest, opts ...client.Option) (*HelloReply, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SayHello", varargs...)
	ret0, _ := ret[0].(*HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHello indicates an expected call of SayHello.
func (mr *MockGreeterHttpClientProxyMockRecorder) SayHello(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockGreeterHttpClientProxy)(nil).SayHello), varargs...)
}

// MockMessaging1RestfulClientProxy is a mock of Messaging1RestfulClientProxy interface.
type MockMessaging1RestfulClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockMessaging1RestfulClientProxyMockRecorder
	isgomock struct{}
}

// MockMessaging1RestfulClientProxyMockRecorder is the mock recorder for MockMessaging1RestfulClientProxy.
type MockMessaging1RestfulClientProxyMockRecorder struct {
	mock *MockMessaging1RestfulClientProxy
}

// NewMockMessaging1RestfulClientProxy creates a new mock instance.
func NewMockMessaging1RestfulClientProxy(ctrl *gomock.Controller) *MockMessaging1RestfulClientProxy {
	mock := &MockMessaging1RestfulClientProxy{ctrl: ctrl}
	mock.recorder = &MockMessaging1RestfulClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessaging1RestfulClientProxy) EXPECT() *MockMessaging1RestfulClientProxyMockRecorder {
	return m.recorder
}

// GetMessage mocks base method.
func (m *MockMessaging1RestfulClientProxy) GetMessage(ctx context.Context, req *GetMessageRequest1, opts ...client.Option) (*Message1, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMessage", varargs...)
	ret0, _ := ret[0].(*Message1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockMessaging1RestfulClientProxyMockRecorder) GetMessage(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockMessaging1RestfulClientProxy)(nil).GetMessage), varargs...)
}

// MockMessaging2RestfulClientProxy is a mock of Messaging2RestfulClientProxy interface.
type MockMessaging2RestfulClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockMessaging2RestfulClientProxyMockRecorder
	isgomock struct{}
}

// MockMessaging2RestfulClientProxyMockRecorder is the mock recorder for MockMessaging2RestfulClientProxy.
type MockMessaging2RestfulClientProxyMockRecorder struct {
	mock *MockMessaging2RestfulClientProxy
}

// NewMockMessaging2RestfulClientProxy creates a new mock instance.
func NewMockMessaging2RestfulClientProxy(ctrl *gomock.Controller) *MockMessaging2RestfulClientProxy {
	mock := &MockMessaging2RestfulClientProxy{ctrl: ctrl}
	mock.recorder = &MockMessaging2RestfulClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessaging2RestfulClientProxy) EXPECT() *MockMessaging2RestfulClientProxyMockRecorder {
	return m.recorder
}

// GetMessage mocks base method.
func (m *MockMessaging2RestfulClientProxy) GetMessage(ctx context.Context, req *GetMessageRequest2, opts ...client.Option) (*Message2, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMessage", varargs...)
	ret0, _ := ret[0].(*Message2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockMessaging2RestfulClientProxyMockRecorder) GetMessage(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockMessaging2RestfulClientProxy)(nil).GetMessage), varargs...)
}

// MockMessaging3RestfulClientProxy is a mock of Messaging3RestfulClientProxy interface.
type MockMessaging3RestfulClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockMessaging3RestfulClientProxyMockRecorder
	isgomock struct{}
}

// MockMessaging3RestfulClientProxyMockRecorder is the mock recorder for MockMessaging3RestfulClientProxy.
type MockMessaging3RestfulClientProxyMockRecorder struct {
	mock *MockMessaging3RestfulClientProxy
}

// NewMockMessaging3RestfulClientProxy creates a new mock instance.
func NewMockMessaging3RestfulClientProxy(ctrl *gomock.Controller) *MockMessaging3RestfulClientProxy {
	mock := &MockMessaging3RestfulClientProxy{ctrl: ctrl}
	mock.recorder = &MockMessaging3RestfulClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessaging3RestfulClientProxy) EXPECT() *MockMessaging3RestfulClientProxyMockRecorder {
	return m.recorder
}

// UpdateMessage mocks base method.
func (m *MockMessaging3RestfulClientProxy) UpdateMessage(ctx context.Context, req *UpdateMessageRequest3, opts ...client.Option) (*Message3, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMessage", varargs...)
	ret0, _ := ret[0].(*Message3)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMessage indicates an expected call of UpdateMessage.
func (mr *MockMessaging3RestfulClientProxyMockRecorder) UpdateMessage(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessage", reflect.TypeOf((*MockMessaging3RestfulClientProxy)(nil).UpdateMessage), varargs...)
}

// MockMessaging4RestfulClientProxy is a mock of Messaging4RestfulClientProxy interface.
type MockMessaging4RestfulClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockMessaging4RestfulClientProxyMockRecorder
	isgomock struct{}
}

// MockMessaging4RestfulClientProxyMockRecorder is the mock recorder for MockMessaging4RestfulClientProxy.
type MockMessaging4RestfulClientProxyMockRecorder struct {
	mock *MockMessaging4RestfulClientProxy
}

// NewMockMessaging4RestfulClientProxy creates a new mock instance.
func NewMockMessaging4RestfulClientProxy(ctrl *gomock.Controller) *MockMessaging4RestfulClientProxy {
	mock := &MockMessaging4RestfulClientProxy{ctrl: ctrl}
	mock.recorder = &MockMessaging4RestfulClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessaging4RestfulClientProxy) EXPECT() *MockMessaging4RestfulClientProxyMockRecorder {
	return m.recorder
}

// UpdateMessage mocks base method.
func (m *MockMessaging4RestfulClientProxy) UpdateMessage(ctx context.Context, req *Message4, opts ...client.Option) (*Message4, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMessage", varargs...)
	ret0, _ := ret[0].(*Message4)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMessage indicates an expected call of UpdateMessage.
func (mr *MockMessaging4RestfulClientProxyMockRecorder) UpdateMessage(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessage", reflect.TypeOf((*MockMessaging4RestfulClientProxy)(nil).UpdateMessage), varargs...)
}

// MockMessaging5RestfulClientProxy is a mock of Messaging5RestfulClientProxy interface.
type MockMessaging5RestfulClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockMessaging5RestfulClientProxyMockRecorder
	isgomock struct{}
}

// MockMessaging5RestfulClientProxyMockRecorder is the mock recorder for MockMessaging5RestfulClientProxy.
type MockMessaging5RestfulClientProxyMockRecorder struct {
	mock *MockMessaging5RestfulClientProxy
}

// NewMockMessaging5RestfulClientProxy creates a new mock instance.
func NewMockMessaging5RestfulClientProxy(ctrl *gomock.Controller) *MockMessaging5RestfulClientProxy {
	mock := &MockMessaging5RestfulClientProxy{ctrl: ctrl}
	mock.recorder = &MockMessaging5RestfulClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessaging5RestfulClientProxy) EXPECT() *MockMessaging5RestfulClientProxyMockRecorder {
	return m.recorder
}

// GetMessage mocks base method.
func (m *MockMessaging5RestfulClientProxy) GetMessage(ctx context.Context, req *GetMessageRequest5, opts ...client.Option) (*Message5, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMessage", varargs...)
	ret0, _ := ret[0].(*Message5)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockMessaging5RestfulClientProxyMockRecorder) GetMessage(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockMessaging5RestfulClientProxy)(nil).GetMessage), varargs...)
}
