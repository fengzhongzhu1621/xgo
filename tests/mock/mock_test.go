// Code generated by MockGen. DO NOT EDIT.
// Source: test.go
//
// Generated by this command:
//
//	mockgen -source test.go -destination mock_test.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMyInterForMock is a mock of MyInterForMock interface.
type MockMyInterForMock struct {
	ctrl     *gomock.Controller
	recorder *MockMyInterForMockMockRecorder
}

// MockMyInterForMockMockRecorder is the mock recorder for MockMyInterForMock.
type MockMyInterForMockMockRecorder struct {
	mock *MockMyInterForMock
}

// NewMockMyInterForMock creates a new mock instance.
func NewMockMyInterForMock(ctrl *gomock.Controller) *MockMyInterForMock {
	mock := &MockMyInterForMock{ctrl: ctrl}
	mock.recorder = &MockMyInterForMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMyInterForMock) EXPECT() *MockMyInterForMockMockRecorder {
	return m.recorder
}

// GetName mocks base method.
func (m *MockMyInterForMock) GetName(id int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName", id)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockMyInterForMockMockRecorder) GetName(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockMyInterForMock)(nil).GetName), id)
}
